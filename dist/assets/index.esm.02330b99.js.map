{"version":3,"file":"index.esm.02330b99.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: React.useCallback((elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            }, [control._fields, name]),\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => (!fieldReference || !fieldReference.validate) &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (props.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _updateValid();\n                        }\n                    }\n                    else {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(props.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : props.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || props.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","unsubscribe","useFormState","methods","useState","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_name","_updateFormState","_subjects","state","_updateValid","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","values","updateValue","_formValues","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","useCallback","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","shouldUseNativeValidation","isFieldArray","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","clearTimeout","setTimeout","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getFieldArray","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","getCurrentFieldValue","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","Promise","shouldFocus","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","payload","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_resetDefaultValues","then","resetOptions","setFocus","shouldSelect","useForm","_formControl","_values"],"mappings":"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"}